@page "/gameparameters"

@using MTurk.UIModels
@using MTurk.Models

@inject IGameParametersService _db
@inject NavigationManager NavigationManager


<h3>Sessions Games</h3>

@if (gameE != null)
{
<EditForm Model="@gameE" OnValidSubmit="@SaveGame">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Surplus:</label>
        <InputNumber class="form-control" id="surplus" @bind-Value="gameE.Surplus"></InputNumber>
    </div>
    <div class="form-group">
        <label>TurksDisValue</label>
        <InputNumber class="form-control" id="turksDisValue" @bind-Value="gameE.TurksDisValue"></InputNumber>
    </div>
    <div class="form-group">
        <label for="machineDisValue">MachineDisValue</label>
        <InputNumber class="form-control" id="marchineDisValue" @bind-Value="gameE.MachineDisValue"></InputNumber>
    </div>
    <div class="form-group">

        <label for="timeOut">TimeOut (secs)</label>
        <InputNumber class="form-control" id="timeOut" @bind-Value="gameE.TimeOut"></InputNumber>

    </div>
    <div class="form-group">

        <label for="stubborn">Stubborn</label>
        <InputNumber class="form-control" id="stubborn" @bind-Value="gameE.Stubborn"></InputNumber>

    </div>
    <div class="form-group">

        <InputCheckbox id="machineStarts" @bind-Value="gameE.MachineStarts"></InputCheckbox>
        <label for="machineStarts">MachineStarts</label>

    </div>
    <div class="form-group">

        <InputCheckbox id="showMachineDisValue" @bind-Value="gameE.ShowMachinesDisValue"></InputCheckbox>
        <label for="machineStarts">ShowMachinesDisValue</label>

    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Submit</button>
        <button type="reset" class="btn btn-secondary" @onclick="@CancelEdits">Cancel</button>
    </div>
</EditForm> }
else
{
<button class="btn btn-secondary  btn-sm" @onclick="@(() => { OnEditGame(0); })">New</button>

                @if (parameters == null)
                {
<div class="alert-info">Loading...</div> }
else
{
<table class="table table-sm">
    <thead>
        <tr>
            <th>Surplus</th>
            <th>TurksDisValue</th>
            <th>MachineDisValue</th>
            <th>TimeOut (secs)</th>
            <th>Stubborn</th>
            <th>MachnieStarts</th>
            <th>ShowMachinesDisValue</th>
            <th></th>

        </tr>
    </thead>
    <tbody>
        @foreach (var p in parameters)
        {
<tr>
    <td>@p.Surplus </td>
    <td>@p.TurksDisValue </td>
    <td>@p.MachineDisValue </td>
    <td>@p.TimeOut </td>
    <td>@p.Stubborn </td>
    <td>@p.MachineStarts</td>
    <td>@p.ShowMachinesDisValue</td>
    <td><button class="btn btn-secondary btn-sm" @onclick="@(() => { OnEditGame(p.Id); })">Edit</button></td>
    <td><button class="btn btn-secondary  btn-sm" @onclick="@(() => { OnDeleteGame(p.Id); })">Delete</button></td>
</tr>
}
    </tbody>
</table>}}


@code { private List<MTurk.Models.GameParametersModel> parameters;
    private GameParameterUI gameE;

    private void OnEditGame(int id)
    {
        GameParametersModel gp;
        if (id == 0)
            gp = new GameParametersModel()
            {
                Id = 0,
                Surplus = 20,
                TurksDisValue = 5,
                MachineDisValue = 5,
                TimeOut = 30,
                Stubborn = 0.1,
                MachineStarts = false,
                ShowMachinesDisValue = false,
            };
        else
            gp = parameters.Find((x) => x.Id == id);

        gameE = new GameParameterUI()
        {
            Id = gp.Id,
            Surplus = gp.Surplus,
            TurksDisValue = gp.TurksDisValue,
            MachineDisValue = gp.MachineDisValue,
            TimeOut = gp.TimeOut,
            Stubborn = gp.Stubborn,
            MachineStarts = gp.MachineStarts,
            ShowMachinesDisValue = gp.ShowMachinesDisValue,
        };
    }

    private void OnDeleteGame(int id)
    {
        _db.DeleteGameParameters(id);
        parameters = _db.GetAllParameters();
        ResetCurrentGame();
    }

    private void ResetCurrentGame()
    {
        gameE = null;
        StateHasChanged();
    }
    private void CancelEdits()
    {
        ResetCurrentGame();
    }

    private async void SaveGame()
    {
        GameParametersModel gp = new GameParametersModel()
        {
            Id = gameE.Id,
            Surplus = gameE.Surplus,
            TurksDisValue = gameE.TurksDisValue,
            MachineDisValue = gameE.MachineDisValue,
            TimeOut = gameE.TimeOut,
            Stubborn = gameE.Stubborn,
            MachineStarts = gameE.MachineStarts,
            ShowMachinesDisValue = gameE.ShowMachinesDisValue,
        };
        await _db.SaveGameParameters(gp);
        parameters = _db.GetAllParameters();
        ResetCurrentGame();

    }
    protected override async Task OnInitializedAsync()
    {
        parameters = await Task.Run(() => _db.GetAllParameters());
    } }
