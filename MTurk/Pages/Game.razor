@page "/game/{sessionId}"

@inject ISessionService sessionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-center">
        <h3>The Game</h3>
    </div>


    <div class="row d-flex">
        <div class="col">
            <div class="mb-4">

                <div class="card chat-room small-chat wide" id="myForm">
                    <div class="card-header">
                        You will get <mark> @game.Game.TurksDisValue </mark> Gold Bars, if you do not reach agreement in @timeOut  seconds.
                    </div>
                    <div class="my-custom-scrollbar pre-scrollable" style="height: 25rem;" id="messageFeed">
                        <div class="card-body p-3">
                            <div class="">
                                <Conversation Game="@game" />

                            </div>
                        </div>
                    </div>
                    <div class="card-footer">

                        <div class="container">
                            @if (gameTimedOut || game.PartnersAgreed)
                            {
                                <div class="d-flex justify-content-center">
                                    <button type="button" class="btn btn-primary mt-4" @onclick="@OnNextGame">Next game</button>
                                </div>
                            }
                            else
                            {
                                <div class="row justify-content-between">
                                    <div class="col-8">
                                        <input type="number" id="for-me" min="0" max="@game.Game.Surplus" step="1" @bind-value="myOffer" /> Gold Bars for me (@(game.Game.Surplus - myOffer) Gold Bars for you)
                                        <input type="range" class="custom-range" min="0" max="@game.Game.Surplus" @bind-value="myOffer" step="1" id="customRange3">
                                    </div>
                                    <div class="col-2">
                                        <button type="button" class="btn btn-primary" @onclick="@MakeAnOffer">Send</button>
                                    </div>
                                </div>
                                @if (MachinesLastOffer() > 0)
                                {
                                    <hr />
                                    <div class="row justify-content-between">
                                        <div class="col-8">
                                            Or accept the offer and get @MachinesLastOffer() Gold Bars
                                        </div>
                                        <div class="col-2">
                                            <button type="button" class="btn btn-primary" @onclick="@AcceptMachinesOffer">Accept</button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@code {

    // https://www.nexmo.com/blog/2019/12/18/create-a-simple-messaging-ui-with-bootstrap-dr

    private bool gameTimedOut = false;
    private GameInfo game = new GameInfo()
    {
        Game = new GameModel(),
        Moves = new List<MoveModel>(),
    };

    [Parameter]
    public string sessionId { get; set; }

    private int myOffer;
    private int timeOut;

    private void InitializeGame()
    {
        if (game is null)
            NavigationManager.NavigateTo($"thankyou/{sessionId}");
        myOffer = 0;
        gameTimedOut = false;
        StartTimerAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        game = await sessionService.GetCurrentGame(sessionId);
        InitializeGame();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await ScrollToBottom();
    }

    private async Task MakeAnOffer() => await MakeAnOffer(true, myOffer);

    private async Task AcceptMachinesOffer() => await MakeAnOffer(true, (int)MachinesLastOffer());

    private async Task MakeAnOffer(bool turksOffer, int amount)
    {
        MoveModel move = new MoveModel()
        {
            MoveBy = turksOffer ? "TURK" : "SYST",
            ProposedAmount = amount,
            OfferAccepted = turksOffer && MachinesLastOffer() == amount,
            GameId = game.Game.Id,
        };
        await sessionService.SaveMove(move);
        game.Moves.Add(move);
        if (move.MoveBy == "TURK" && !move.OfferAccepted)
        {
            int machinesOffer = MachineAI.GetMachinesOffer(game.Game.Surplus, game.Game.Stubborn, game.Game.MachineDisValue, amount, MachinesLastOffer());
            MoveModel machinesMove = new MoveModel()
            {
                MoveBy = "MACH",
                ProposedAmount = machinesOffer,
                OfferAccepted = machinesOffer == amount,
                GameId = game.Game.Id,
            };
            await sessionService.SaveMove(machinesMove);
            game.Moves.Add(machinesMove);
        }
        game.PartnersAgreed = game.Moves[game.Moves.Count - 1].OfferAccepted;
        if (game.PartnersAgreed || move.MoveBy == "SYST")
        {
            await sessionService.FinishGame(game.Game);
        }

        myOffer = 0;
    }

    private int? MachinesLastOffer()
    {
        for (int i = game.Moves.Count - 1; i >= 0; i--)
        {
            if (game.Moves[i].MoveBy == "MACH")
                return game.Moves[i].ProposedAmount;
        }
        return null;
    }

    public async Task OnTimeOut()
    {
        gameTimedOut = true;
        await MakeAnOffer(false, game.Game.TurksDisValue);
        StateHasChanged();
    }
    private async void OnNextGame()
    {
        var g = await sessionService.StartNewGame(sessionId);
        game = g;
        InitializeGame();
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollFeedToBottom", "Hello world");
    }



    private async void StartTimerAsync()
    {
        if (game is null)
            return;
        timeOut = game.Game.TimeOut;
        while (timeOut > 0)
        {
            if (game.PartnersAgreed)
            {
                StateHasChanged();
                return;
            }
            timeOut--;
            StateHasChanged();
            await Task.Delay(1000);
        }
        if (!game.PartnersAgreed)
            await OnTimeOut();
    }
}
